$date
	Fri Aug  8 17:56:12 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module matmul_tb $end
$var wire 32 ! C [31:0] $end
$var reg 32 " A [31:0] $end
$var reg 32 # B [31:0] $end
$var reg 1 $ clk $end
$var reg 1 % rst $end
$scope module uut $end
$var wire 32 & A [31:0] $end
$var wire 32 ' B [31:0] $end
$var wire 1 $ clk $end
$var wire 1 % rst $end
$var wire 32 ( C [31:0] $end
$scope module uut $end
$var wire 32 ) A [31:0] $end
$var wire 32 * B [31:0] $end
$var wire 1 $ clk $end
$var wire 1 % rst $end
$var reg 32 + C [31:0] $end
$var reg 16 , sum0 [15:0] $end
$var reg 16 - sum1 [15:0] $end
$var reg 16 . sum2 [15:0] $end
$var reg 16 / sum3 [15:0] $end
$var reg 16 0 temp0 [15:0] $end
$var reg 16 1 temp1 [15:0] $end
$var reg 16 2 temp2 [15:0] $end
$var reg 16 3 temp3 [15:0] $end
$var reg 16 4 temp4 [15:0] $end
$var reg 16 5 temp5 [15:0] $end
$var reg 16 6 temp6 [15:0] $end
$var reg 16 7 temp7 [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
b0 *
b0 )
bx (
b0 '
b0 &
1%
0$
b0 #
b0 "
bx !
$end
#5
b0 /
b0 .
b0 -
b0 ,
b0 !
b0 (
b0 +
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
1$
#10
0$
#15
1$
#20
0$
b10000000000000001 #
b10000000000000001 '
b10000000000000001 *
b10000000000000001 "
b10000000000000001 &
b10000000000000001 )
0%
#25
b10000000000000001 !
b10000000000000001 (
b10000000000000001 +
b1 .
b1 ,
b1 4
b1 0
1$
#30
0$
#35
1$
#40
0$
b1000000001110000011000000101 #
b1000000001110000011000000101 '
b1000000001110000011000000101 *
b100000000110000001000000001 "
b100000000110000001000000001 &
b100000000110000001000000001 )
#45
b110010001010110001011000010011 !
b110010001010110001011000010011 (
b110010001010110001011000010011 +
b110010 /
b101011 .
b10110 -
b10011 ,
b100000 7
b10010 6
b11100 5
b1111 4
b10000 3
b110 2
b1110 1
b101 0
1$
#50
0$
#55
1$
#60
0$
b1001000010000000011100000110 #
b1001000010000000011100000110 '
b1001000010000000011100000110 *
b101000001000000001100000010 "
b101000001000000001100000010 &
b101000001000000001100000010 )
#65
b1001001010000000010100100100100 !
b1001001010000000010100100100100 (
b1001001010000000010100100100100 +
b1001001 /
b1000000 .
b101001 -
b100100 ,
b101101 7
b11100 6
b101000 5
b11000 4
b11011 3
b1110 2
b11000 1
b1100 0
1$
#70
0$
#75
1$
#80
0$
b11000000100010010101111010000001 #
b11000000100010010101111010000001 '
b11000000100010010101111010000001 *
b10010000101010011010100100100 "
b10010000101010011010100100100 &
b10010000101010011010100100100 )
#85
b110110001101111111100010000001 !
b110110001101111111100010000001 (
b110110001101111111100010000001 +
b1010100110110 /
b1010000110111 .
b11010011111000 -
b10111010000001 ,
b110110000000 7
b11110110110 6
b100110100010 5
b101010010101 4
b10011111000000 3
b110100111000 2
b1110001011101 1
b1001000100100 0
1$
#90
0$
#95
1$
#100
0$
b10110001111100000101011001100011 #
b10110001111100000101011001100011 '
b10110001111100000101011001100011 *
b10000100100001001101011000001001 "
b10000100100001001101011000001001 &
b10000100100001001101011000001001 )
#105
b10011100110011001111110000011011 !
b10011100110011001111110000011011 (
b10011100110011001111110000011011 +
b1000011110011100 /
b1010111011001100 .
b1001011011111100 -
b1100110000011011 ,
b101101101000100 7
b10110001011000 6
b111101111000000 5
b11001100001100 4
b1001001111110110 3
b1100000110 2
b1100100010100000 1
b1101111011 0
1$
#110
0$
#115
1$
#120
0$
b1000110110111111001100110001101 #
b1000110110111111001100110001101 '
b1000110110111111001100110001101 *
b110101110010111101100001101 "
b110101110010111101100001101 &
b110101110010111101100001101 )
#125
b110101000111110110011101001110 !
b110101000111110110011101001110 (
b110101000111110110011101001110 +
b111000000110101 /
b110101100011111 .
b10100101100111 -
b111001001001110 ,
b110100100 7
b110111010010001 6
b10100111010 5
b110010111100101 4
b10000110100010 3
b11111000101 2
b110101100100101 1
b11100101001 0
1$
#130
0$
#135
1$
#140
0$
b10001001001101110101001000010010 #
b10001001001101110101001000010010 '
b10001001001101110101001000010010 *
b10110010110000101000010001100101 "
b10110010110000101000010001100101 &
b10110010110000101000010001100101 )
#145
b1100110111000101111111001110110 !
b1100110111000101111111001110110 (
b1100110111000101111111001110110 +
b1001110101100110 /
b11001111100010 .
b110011011111110 -
b10001101110110 ,
b101111101000010 7
b11111000100100 6
b10011000111110 5
b110110100100 4
b100011010100100 3
b10000001011010 2
b1110001011100 1
b11100011010 0
1$
#150
0$
#155
1$
#160
0$
b110110101111100110100001101 #
b110110101111100110100001101 '
b110110101111100110100001101 *
b111100111110001100000001 "
b111100111110001100000001 &
b111100111110001100000001 )
#165
b10010111010101110001111110110010 !
b10010111010101110001111110110010 (
b10010111010101110001111110110010 +
b1100001010010111 /
b110001010111 .
b11000011111 -
b1011111010110010 ,
b0 7
b1100001010010111 6
b0 5
b110001010111 4
b10101010010 3
b11001101 2
b1011111010100101 1
b1101 0
1$
#170
0$
#175
1$
#180
0$
